'use strict'

var models = require('./models');

/* ------------------------------------------------------------- */

function User(userId) {
  this.userId = userId;
}

/* ------------------------------------------------------------- */

User.prototype.login = function(gameId, userId, platform, ip) {
  throw new NotImplementedError();
};

User.prototype.logout = function(gameId, facebookId) {
  throw new NotImplementedError();
};

/* ------------------------------------------------------------- */

User.prototype.maxHeroLevel = function () {
  throw new NotImplementedError();
};

User.prototype.challengeStage = function (stageId) {
  throw new NotImplementedError();
};

User.prototype.updateWave = function (honbul, exp) {
  throw new NotImplementedError();
};

User.prototype.spendSurvivalTry = function () {
  throw new NotImplementedError();
};

User.prototype.resetSurvivalTry = function (useCash) {
  throw new NotImplementedError();
};

User.prototype.updateSurvivalWaveRecord = function (wave) {
  throw new NotImplementedError();
};

User.prototype.startGame = function () {
  throw new NotImplementedError();
};

User.prototype.endGame = function () {
  throw new NotImplementedError();
};

User.prototype.finishGame = function (playTime, exp, honbul) {
  throw new NotImplementedError();
};

User.prototype.finishSurvivalGame = function (wave, score, honbul, playTime, exp) {
  throw new NotImplementedError();
};

/* ------------------------------------------------------------- */

User.prototype.spendHeart = function (heart) {
  throw new NotImplementedError();
};

User.prototype.findBuddy = function (name) {
  throw new NotImplementedError();
};

User.prototype.buddies = function (buddies) {
  throw new NotImplementedError();
};

User.prototype.askFriendships = function (buddies) {
  throw new NotImplementedError();
};

User.prototype.proposeBuddies = function (buddies) {
  throw new NotImplementedError();
};

User.prototype.heartsToReceive = function (hearts) {
  throw new NotImplementedError();
};

User.prototype.sendHearts = function (hearts) {
  throw new NotImplementedError();
};

User.prototype.sendHeart = function (receiverId) {
  throw new NotImplementedError();
};

User.prototype.restrictSendHearts = function (hearts) {
  throw new NotImplementedError();
};

User.prototype.updateRestrictSendHearts = function (receiverId) {
  throw new NotImplementedError();
};

User.prototype.receiveHeart = function (senderId) {
  throw new NotImplementedError();
};

User.prototype.exfriend = function (friendId) {
  throw new NotImplementedError();
};

User.prototype.askFriendship = function (targetId) {
  throw new NotImplementedError();
};

User.prototype.acceptFriendship = function (targetId) {
  throw new NotImplementedError();
};

User.prototype.rejectFriendship = function (targetId) {
  throw new NotImplementedError();
};

User.prototype.sendProfileToBuddy = function (online) {
  throw new NotImplementedError();
};

User.prototype.toggleSearchable = function () {
  throw new NotImplementedError();
};

User.prototype.isBreakUpFriendLimit = function () {
  throw new NotImplementedError();
};

/* ------------------------------------------------------------- */

User.prototype.isFacebookFriend = function (facebookId) {
  throw new NotImplementedError();
};

User.prototype.isFacebookFriendByUserId = function (userId) {
  throw new NotImplementedError();
};

User.prototype.isFacebookInvited = function (facebookId) {
  throw new NotImplementedError();
};

User.prototype.isFacebookInvitationLimit = function() {
  throw new NotImplementedError();
};

User.prototype.facebookInvitationCount = function () {
  throw new NotImplementedError();
};

User.prototype.inviteFacebookFriend = function (facebookId) {
  throw new NotImplementedError();
};

User.prototype.isFacebookHeartDayLimit = function () {
  throw new NotImplementedError();
};

User.prototype.linkFacebookFriend = function (friends) {
  throw new NotImplementedError();
};

User.prototype.unlinkFacebookFriend = function (friends) {
  throw new NotImplementedError();
};

User.prototype.appendFacebookFriends = function (friends) {
  throw new NotImplementedError();
};

User.prototype.changeFacebookOptions = function (noMessage, noProfile) {
  throw new NotImplementedError();
};

/* ------------------------------------------------------------- */

User.prototype.materialCooltime = function () {
  throw new NotImplementedError();
};

User.prototype.resetMaterialCooltime = function () {
  throw new NotImplementedError();
};

User.prototype.collectMaterial = function (materialId, price) {
  throw new NotImplementedError();
};

/* ------------------------------------------------------------- */

User.prototype.addInventorySlot = function (count) {
  throw new NotImplementedError();
};

User.prototype.emptySlotInInventory = function () {
  throw new NotImplementedError();
};

User.prototype.excessSlotInInventory = function () {
  throw new NotImplementedError();
};

User.prototype.putOn = function (item) {
  throw new NotImplementedError();
};

User.prototype.takeOff = function (item) {
  throw new NotImplementedError();
};

User.prototype.reinforceItem = function (item, honbul, cash, stone) {
  throw new NotImplementedError();
};

User.prototype.fixItem = function (item, cost) {
  throw new NotImplementedError();
};

User.prototype.getItemById = function (itemId) {
  throw new NotImplementedError();
};

User.prototype.getItemByNo = function (itemNo) {
  throw new NotImplementedError();
};

User.prototype.getItemCount = function (itemNo) {
  throw new NotImplementedError();
};

User.prototype.hasItem = function (itemNo, count) {
  throw new NotImplementedError();
};

User.prototype.dropItem = function (item, count) {
  throw new NotImplementedError();
};

User.prototype.removeItem = function (item) {
  throw new NotImplementedError();
};

User.prototype.makeItem = function (itemNo, blueprints) {
  throw new NotImplementedError();
};

User.prototype.addItem = function (itemNo) {
  throw new NotImplementedError();
};

User.prototype.addMaterial = function (materialId, count) {
  throw new NotImplementedError();
};

/* ------------------------------------------------------------- */

User.prototype.makeHero = function (job, first) {
  throw new NotImplementedError();
};

User.prototype.selectHero = function (hero) {
  throw new NotImplementedError();
};

User.prototype.getHeroByJob = function (job) {
  throw new NotImplementedError();
};

User.prototype.getHeroById = function (heroId) {
  throw new NotImplementedError();
};

User.prototype.getSelectedHero = function () {
  throw new NotImplementedError();
};

/* ------------------------------------------------------------- */

User.prototype.hasCostume = function (costumeId) {
  throw new NotImplementedError();
};

User.prototype.addCostume = function (costume) {
  throw new NotImplementedError();
};

User.prototype.buyCostume = function (costumeId, cost) {
  throw new NotImplementedError();
};

User.prototype.makeCostume = function (costumeId, cost) {
  throw new NotImplementedError();
};

User.prototype.reinforceCostume = function (costumeId, honbul, cash) {
  throw new NotImplementedError();
};

User.prototype.fetchCostume = function (hero) {
  throw new NotImplementedError();
};

/* ------------------------------------------------------------- */

User.prototype.buyInEshop = function (paymentId, payment) {
  throw new NotImplementedError();
};

User.prototype.hasEshopEvent = function () {
  throw new NotImplementedError();
};

User.prototype.buyInCashShop = function (cash, good) {
  throw new NotImplementedError();
};

User.prototype.buyInOniShop = function (price, discount) {
  throw new NotImplementedError();
};

/* ------------------------------------------------------------- */

User.prototype.takeLottery = function (type, count, event, cash, tailsman) {
  throw new NotImplementedError();
};

/* ------------------------------------------------------------- */

User.prototype.updateStoryRanking = function (difficulty) {
  throw new NotImplementedError();
};

User.prototype.updateSurvivalRanking = function (score, wave, playTime) {
  throw new NotImplementedError();
};

/* ------------------------------------------------------------- */

User.prototype.addGift = function (giftId) {
  throw new NotImplementedError();
};

User.prototype.deleteGift = function (giftId) {
  throw new NotImplementedError();
};

User.prototype.makeRewardMaterial = function (stage, difficulty) {
  throw new NotImplementedError();
};

User.prototype.makeTreasures = function (treasures, stage, difficulty) {
  throw new NotImplementedError();
};

User.prototype.makeSurvivalTreasures = function (treasures, wave) {
  throw new NotImplementedError();
};

User.prototype.giveTreasure = function (treasureId, type, itemId) {
  throw new NotImplementedError();
};

User.prototype.makeGift = function (giftId) {
  throw new NotImplementedError();
};

User.prototype.takeGift = function (giftId) {
  throw new NotImplementedError();
};

User.prototype.giveLevelUpGift = function () {
  throw new NotImplementedError();
};

User.prototype.giveCostumeGift = function () {
  throw new NotImplementedError();
};

User.prototype.giveMultiGift = function () {
  throw new NotImplementedError();
};

User.prototype.giveReviewGift = function (presentId) {
  throw new NotImplementedError();
};

/* ------------------------------------------------------------- */

User.prototype.achivement = function (type, count) {
  throw new NotImplementedError();
};

User.prototype.itemAchivement = function (rank) {
  throw new NotImplementedError();
};

User.prototype.stageClearAchievment = function (stageId) {
  throw new NotImplementedError();
};

User.prototype.todayQuestReward = function () {
  throw new NotImplementedError();
};

User.prototype.rewardQuest = function (rewardType, express) {
  throw new NotImplementedError();
};

User.prototype.rewardAchivement = function (type, rewardType, express) {
  throw new NotImplementedError();
};

/* ------------------------------------------------------------- */

User.prototype.fillInfo = function(info) {
  throw new NotImplementedError();
};

User.prototype.fillProperties = function (properties) {
  throw new NotImplementedError();
};

User.prototype.fillBadges = function (badges) {
  throw new NotImplementedError();
};

User.prototype.fillHeroes = function (heroes) {
  throw new NotImplementedError();
};

User.prototype.fillPlayer = function (player) {
  throw new NotImplementedError();
};

User.prototype.fillHeart = function (heart) {
  throw new NotImplementedError();
};

User.prototype.fillCostumesToMake = function (costumes) {
  throw new NotImplementedError();
};

User.prototype.fillCostumesToReinforce = function (costumes) {
  throw new NotImplementedError();
};

User.prototype.fillEshop = function (market, eshop) {
  throw new NotImplementedError();
};

User.prototype.fillCashShop = function (market, cashShop) {
  throw new NotImplementedError();
};

User.prototype.fillOniShop = function (price, discount, oniShop) {
  throw new NotImplementedError();
};

User.prototype.fillGifts = function (gifts) {
  throw new NotImplementedError();
};

User.prototype.fillAchivements = function (achivements) {
  throw new NotImplementedError();
};

User.prototype.fillInvitedFacebookFriends = function (friends) {
  throw new NotImplementedError();
};

User.prototype.fillCouponGift = function (couponId, couponCode) {
  throw new NotImplementedError();
};

User.prototype.fillKeywordCouponGift = function (keyword) {
  throw new NotImplementedError();
};

User.prototype.fillCouponHistory = function (history) {
  throw new NotImplementedError();
};

User.prototype.fillLotterys = function (lotterys) {
  throw new NotImplementedError();
};

User.prototype.fillRanking = function (type, first, count) {
  throw new NotImplementedError();
};

User.prototype.fillSurvivalBuff = function () {
  throw new NotImplementedError();
};

User.prototype.fillVip = function () {
  throw new NotImplementedError();
};

User.prototype.fillDailystamp = function (yearMonth) {
  throw new NotImplementedError();
};

User.prototype.fillAccountMerge = function (facebookId) {
  throw new NotImplementedError();
};

User.prototype.fillNotifyMessage = function (notifyMessage) {
  throw new NotImplementedError();
};

/* ------------------------------------------------------------- */

module.exports = User;

module.exports.getUserId = function (gameId, facebookId) {
  return new Promise(function (resolve, reject) {
    models.makeUser(gameId, facebookId, 10, 10, 1).then(function (userId) {
      resolve(userId);
    }, function (err) {
      reject(err);
    });
  });
};

/* ------------------------------------------------------------- */
